<UserControl
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:controls="clr-namespace:ShadUI.Demo.Controls"
    xmlns:viewModels="clr-namespace:ShadUI.Demo.ViewModels"
    mc:Ignorable="d" d:DesignWidth="900"
    x:Class="ShadUI.Demo.Views.DialogsPage"
    x:DataType="viewModels:DialogsViewModel">
    <DockPanel LastChildFill="True">
        <StackPanel DockPanel.Dock="Top" MaxWidth="1536" Margin="48 24">
            <TextBlock Classes="h3" Text="Dialogs" />
            <TextBlock
                Classes="p"
                TextWrapping="Wrap"
                HorizontalAlignment="Left"
                Text="A window overlaid on either the primary window or another dialog window, rendering the content underneath inert." />
        </StackPanel>
        <ScrollViewer>
            <Panel Margin="48 24" MaxWidth="1536">
                <StackPanel Spacing="32">

                    <StackPanel Spacing="8" Orientation="Vertical">
                        <TextBlock Text="Installation" Classes="h4" />
                        <Separator Margin="0" />
                        <TextBlock Classes="Small" TextWrapping="Wrap"
                                   Text="Make sure to add DialogHost as the top most element in a window and supply its DialogManager and Window owner" />
                        <controls:CodeTextBlock Language="xaml">
                            <Run Text="&lt;controls:Window.Hosts&gt;" />
                            <LineBreak />
                            <Run Text="    &lt;dialogs:DialogHost Manager=&quot;{Binding DialogManager}&quot;" />
                            <LineBreak />
                            <Run
                                Text="                        Owner=&quot;{Binding RelativeSource={RelativeSource AncestorType=controls:Window}}&quot; /&gt;" />
                            <LineBreak />
                            <Run Text="&lt;/controls:Window.Hosts&gt;" />
                        </controls:CodeTextBlock>
                        <TextBlock Classes="Small"
                                   Margin="0,12,0,0"
                                   TextWrapping="Wrap"
                                   Text="Resolve DialogManager using dependency injection framework for easy access. Make sure to have only one instance of DialogManager." />
                        <controls:CodeTextBlock Language="cs">
                            <Run Text="public static void AddServices(this IServiceCollection collection)" />
                            <LineBreak />
                            <Run Text="\{" />
                            <LineBreak />
                            <Run Text="    //...other service injection" />
                            <LineBreak />
                            <Run Text="    " />
                            <LineBreak />
                            <Run Text="    collection.AddSingleton&lt;DialogManager&gt;();" />
                            <LineBreak />
                            <Run Text="}" />
                        </controls:CodeTextBlock>
                        <TextBlock Classes="Small" Margin="0,12,0,0"
                                   Text="When showing a custom dialog, make sure to register all dialog views with its related DataContext type." />
                        <controls:CodeTextBlock Language="cs">
                            <Run Text="// example of extension method to register dialogs" />
                            <LineBreak />
                            <Run Text="public static IServiceProvider RegisterDialogs(this IServiceProvider service)" />
                            <LineBreak />
                            <Run Text="\{" />
                            <LineBreak />
                            <Run Text="    var dialogService = service.GetRequiredService&lt;DialogManager&gt;();" />
                            <LineBreak />
                            <Run
                                Text="    dialogService.Register&lt;LoginContent, LoginViewModel&gt;();" />
                            <LineBreak />
                            <Run Text="    " />
                            <LineBreak />
                            <Run Text="    return service;" />
                            <LineBreak />
                            <Run Text="}" />
                            <LineBreak />
                            <LineBreak />
                            <LineBreak />
                            <Run Text="// in the method where the DI framework is setup" />
                            <LineBreak />
                            <Run Text="\{" />
                            <LineBreak />
                            <LineBreak />
                            <Run Text="// ..other code" />
                            <LineBreak />
                            <LineBreak />
                            <Run Text="    var serviceProvider = serviceCollection" />
                            <LineBreak />
                            <Run Text="        .BuildServiceProvider()" />
                            <LineBreak />
                            <Run Text="        .RegisterDialogs(); // to register all dialogs" />
                            <LineBreak />
                            <LineBreak />
                            <Run Text="// ..the rest of the code" />
                            <LineBreak />
                            <LineBreak />
                            <Run Text="}" />
                        </controls:CodeTextBlock>
                    </StackPanel>
                    <controls:ControlBlock
                        Title="Alert Dialog"
                        Language="cs"
                        Code="{Binding AlertDialogCode}">
                        <StackPanel>
                            <Button Command="{Binding ShowDialogCommand }" Classes="Outline" Content="Show Dialog"
                                    HorizontalAlignment="Center" />
                        </StackPanel>
                    </controls:ControlBlock>
                    <controls:ControlBlock
                        Title="Destructive Style Dialog"
                        Language="cs"
                        Code="{Binding DestructiveAlertDialogCode}">
                        <StackPanel>
                            <Button Command="{Binding ShowDestructiveStyleDialogCommand }" Classes="Outline"
                                    Content="Show Dialog"
                                    HorizontalAlignment="Center" />
                        </StackPanel>
                    </controls:ControlBlock>
                    <controls:ControlBlock
                        Title="Custom Dialog"
                        Language="cs"
                        Code="{Binding CustomDialogCode}">
                        <StackPanel>
                            <Button Command="{Binding ShowCustomDialogCommand }" Classes="Outline"
                                    Content="Show Dialog"
                                    HorizontalAlignment="Center" />
                        </StackPanel>
                    </controls:ControlBlock>
                </StackPanel>
            </Panel>
        </ScrollViewer>
    </DockPanel>

</UserControl>